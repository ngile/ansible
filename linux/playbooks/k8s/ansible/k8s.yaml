---
- name: Install k8s with containerd
  hosts: all
  tasks:
    - name: Install pakcages
      become: true
      block:
        - name: Update Package Cache
          apt:
            update_cache: yes
          changed_when: false

        - name: Install required packages
          package:
            name:
              - curl
              - apt-transport-https
              - ca-certificates
              - gpg
              - vim

        - name: Add registry keys
          ansible.builtin.apt_key:
            id: "{{ item.id }}"
            url: "{{ item.url }}"
            keyring: "{{ item.asc }}"
            state: present
          loop:
            - {
                id: "9DC858229FC7DD38854AE2D88D81803C0EBFCD88",
                url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg",
                asc: "/etc/apt/keyrings/docker.gpg",
              }
            - {
                id: "DE15B14486CD377B9E876E1A234654DA9A296436",
                url: "https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key",
                asc: "/etc/apt/keyrings/kubernetes-apt-keyring.gpg",
              }

        - name: Add repositories
          ansible.builtin.apt_repository:
            repo: "{{ item }}"
            state: present
          loop:
            - "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/{{ ansible_distribution|lower }} {{ ansible_distribution_release }} stable"
            - "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /"

        - name: Update Package Cache
          apt:
            update_cache: yes
          changed_when: false

        - name: Install containerd, kubelet, kubeadm
          package:
            name:
              - containerd.io
              - kubelet
              - kubectl
              - kubeadm

        - name: Update /etc/hosts file
          ansible.builtin.lineinfile:
            path: /etc/hosts
            regexp: "^{{ hostvars[item]['ansible_facts']['eth1']['ipv4']['address'] }}"
            line: "{{ hostvars[item]['ansible_facts']['eth1']['ipv4']['address'] }} {{ item }}"
          loop: "{{ groups['all'] }}"

      rescue:
        - debug:
            var: "{{ item }}"
          loop:
            - "{{ groups['all'] }}"
            - "{{ hostvars }}"

      when: ansible_os_family == 'Debian'
      tags:
        - always

    - name: Configure containerd
      become: true
      block:
        - name: Add overlay and br_netfilter modules
          community.general.modprobe:
            name: "{{ item }}"
            state: present
            persistent: present
          loop:
            - overlay
            - br_netfilter

        - name: Load iptable modules
          ansible.posix.sysctl:
            name: "{{ item.name }}"
            value: "{{ item.value }}"
            sysctl_file: /etc/sysctl.d/k8s.conf
            reload: true
            state: present
          loop:
            - { name: "net.bridge.bridge-nf-call-ip6tables", value: 1 }
            - { name: "net.bridge.bridge-nf-call-iptables", value: 1 }
            - { name: "net.ipv4.ip_forward", value: 1 }

        - name: Check if file exists
          ansible.builtin.stat:
            path: /etc/containerd/config.toml
          register: containerd_file

        - name: Generate default containerd config file
          ansible.builtin.shell: containerd config default > /etc/containerd/config.toml

        - name: Enable SystemdCgroup
          ansible.builtin.replace:
            path: /etc/containerd/config.toml
            regexp: "SystemdCgroup = false"
            replace: "SystemdCgroup = true"

      always:
        - name: Restart containerd
          become: true
          ansible.builtin.systemd_service:
            name: containerd
            state: restarted

      tags:
        - always

- name: Setup k8s on control plane node
  hosts: all:!~node
  tasks:
    - name: Configure k8s on control plane
      become: true
      block:
        - name: Setup k8s with kubeadm
          command: "kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address {{ ansible_eth1.ipv4.address }}"
          register: kubeadm_status

        - name: Create a directory if it does not exist
          ansible.builtin.file:
            path: /home/vagrant/.kube
            state: directory
            owner: vagrant
            group: vagrant
            mode: "0755"

        - name: Copy k8s config file
          ansible.builtin.copy:
            src: /etc/kubernetes/admin.conf
            dest: /home/vagrant/.kube/config
            owner: vagrant
            group: vagrant
            remote_src: yes
        - name: Install flannel CID
          # command: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
          command: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
          environment:
            KUBECONFIG: /etc/kubernetes/admin.conf
          register: kubectl_file

        - name: get join command
          shell: kubeadm token create --print-join-command
          register: join_command_raw

        - name: set join command
          set_fact:
            join_command: "{{ join_command_raw.stdout_lines[0] }}"

      rescue:
        - debug:
            var: "{{ item }}"
          loop:
            - kubeadm_status
            - kubectl_file

      when: ansible_hostname is regex("^ctrlplane")
      tags:
        - always

- name: Setup k8s on worker node
  hosts: all:!~ctrlplane
  tasks:
    - name: Configure k8s on worker nodes
      become: true
      block:
        - name: Join cluster
          shell: "{{ hostvars['ctrlplane-101'].join_command }}"
          register: join_cmd_output

      rescue:
        - name: Debug join clusterm jmd
          debug:
            var: join_cmd_output
      when: ansible_hostname is regex("^node.*")
      tags:
        - always
